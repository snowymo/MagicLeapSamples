// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --
//
// THE CONTENTS OF THIS FILE IS GENERATED BY CODE AND
// ANY MODIFICATIONS WILL BE OVERWRITTEN
//
// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --

// %BANNER_BEGIN%
// ---------------------------------------------------------------------
// %COPYRIGHT_BEGIN%
//
// Copyright (c) 2018 Magic Leap, Inc. All Rights Reserved.
// Use of this file is governed by the Creator Agreement, located
// here: https://id.magicleap.com/creator-terms
//
// %COPYRIGHT_END%
// ---------------------------------------------------------------------
// %BANNER_END%

// %SRC_VERSION%: 2

#include <GestureBase.h>
#include <Gesture.h>

namespace prefabs {

  const PrefabDescriptor& GestureBase::getClassPrefabDescriptor() {
    return classPrefabDescriptor_;
  }

  PrefabBase* GestureBase::createPrefab(ExtendedPrefabManager* extendedPrefabManager, lumin::Node* root) {
    PrefabBase* const prefab = new Gesture(extendedPrefabManager, root);
    return prefab;
  }

  GestureBase::GestureBase(ExtendedPrefabManager* extendedPrefabManager, lumin::Node* root)
  : PrefabBase(extendedPrefabManager, root) {

    LeftHandValue = lumin::ui::UiText::CastFrom(root->findChild(Names::LeftHandValue));
    RightHandValue = lumin::ui::UiText::CastFrom(root->findChild(Names::RightHandValue));
    Finger = lumin::ui::UiImage::CastFrom(root->findChild(Names::Finger));
    Fist = lumin::ui::UiImage::CastFrom(root->findChild(Names::Fist));
    Pinch = lumin::ui::UiImage::CastFrom(root->findChild(Names::Pinch));
    Thumb = lumin::ui::UiImage::CastFrom(root->findChild(Names::Thumb));
    L = lumin::ui::UiImage::CastFrom(root->findChild(Names::L));
    OpenHandBack = lumin::ui::UiImage::CastFrom(root->findChild(Names::OpenHandBack));
    Ok = lumin::ui::UiImage::CastFrom(root->findChild(Names::Ok));
    C = lumin::ui::UiImage::CastFrom(root->findChild(Names::C));
    LeftHandGestureValue = lumin::ui::UiText::CastFrom(root->findChild(Names::LeftHandGestureValue));
    RightHandGestureValue = lumin::ui::UiText::CastFrom(root->findChild(Names::RightHandGestureValue));
    keypointModelToggle = lumin::ui::UiToggle::CastFrom(root->findChild(Names::keypointModelToggle));
    keypointNamesToggle = lumin::ui::UiToggle::CastFrom(root->findChild(Names::keypointNamesToggle));
    Keypoint = lumin::ModelNode::CastFrom(root->findChild(Names::Keypoint));

  }

  GestureBase::~GestureBase() {
  }

  const PrefabDescriptor& GestureBase::getPrefabDescriptor() const {
    return classPrefabDescriptor_;
  }

  const PrefabBase::NodeReferences& GestureBase::getNodeReferences() const {
    return classNodeReferences_;
  }

  lumin::ui::UiText* GestureBase::getLeftHandValue() {
    return LeftHandValue;
  }

  lumin::ui::UiText* GestureBase::getRightHandValue() {
    return RightHandValue;
  }

  lumin::ui::UiImage* GestureBase::getFinger() {
    return Finger;
  }

  lumin::ui::UiImage* GestureBase::getFist() {
    return Fist;
  }

  lumin::ui::UiImage* GestureBase::getPinch() {
    return Pinch;
  }

  lumin::ui::UiImage* GestureBase::getThumb() {
    return Thumb;
  }

  lumin::ui::UiImage* GestureBase::getL() {
    return L;
  }

  lumin::ui::UiImage* GestureBase::getOpenHandBack() {
    return OpenHandBack;
  }

  lumin::ui::UiImage* GestureBase::getOk() {
    return Ok;
  }

  lumin::ui::UiImage* GestureBase::getC() {
    return C;
  }

  lumin::ui::UiText* GestureBase::getLeftHandGestureValue() {
    return LeftHandGestureValue;
  }

  lumin::ui::UiText* GestureBase::getRightHandGestureValue() {
    return RightHandGestureValue;
  }

  lumin::ui::UiToggle* GestureBase::getKeypointModelToggle() {
    return keypointModelToggle;
  }

  lumin::ui::UiToggle* GestureBase::getKeypointNamesToggle() {
    return keypointNamesToggle;
  }

  lumin::ModelNode* GestureBase::getKeypoint() {
    return Keypoint;
  }

}
