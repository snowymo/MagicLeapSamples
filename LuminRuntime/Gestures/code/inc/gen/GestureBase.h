// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --
//
// THE CONTENTS OF THIS FILE IS GENERATED BY CODE AND
// ANY MODIFICATIONS WILL BE OVERWRITTEN
//
// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --

// %BANNER_BEGIN%
// ---------------------------------------------------------------------
// %COPYRIGHT_BEGIN%
//
// Copyright (c) 2018 Magic Leap, Inc. All Rights Reserved.
// Use of this file is governed by the Creator Agreement, located
// here: https://id.magicleap.com/creator-terms
//
// %COPYRIGHT_END%
// ---------------------------------------------------------------------
// %BANNER_END%

// %SRC_VERSION%: 2

#pragma once

#include <PrefabBase.h>
#include <PrefabDescriptor.h>
#include <lumin/node/ModelNode.h>
#include <lumin/ui/node/UiImage.h>
#include <lumin/ui/node/UiText.h>
#include <lumin/ui/node/UiToggle.h>

class ExtendedPrefabManager;

namespace prefabs {

  class Gesture;

  class GestureBase : public PrefabBase {
  public:

    static const PrefabDescriptor& getClassPrefabDescriptor();

  public:

    struct Names {
    public:

      static const std::string& LeftHandValue;
      static const std::string& RightHandValue;
      static const std::string& Finger;
      static const std::string& Fist;
      static const std::string& Pinch;
      static const std::string& Thumb;
      static const std::string& L;
      static const std::string& OpenHandBack;
      static const std::string& Ok;
      static const std::string& C;
      static const std::string& LeftHandGestureValue;
      static const std::string& RightHandGestureValue;
      static const std::string& keypointModelToggle;
      static const std::string& keypointNamesToggle;
      static const std::string& Keypoint;

    protected:
      Names() = delete;
      ~Names() = delete;
    };

  public:

    const PrefabDescriptor& getPrefabDescriptor() const override;
    const NodeReferences& getNodeReferences() const override;

    virtual lumin::ui::UiText* getLeftHandValue();
    virtual lumin::ui::UiText* getRightHandValue();
    virtual lumin::ui::UiImage* getFinger();
    virtual lumin::ui::UiImage* getFist();
    virtual lumin::ui::UiImage* getPinch();
    virtual lumin::ui::UiImage* getThumb();
    virtual lumin::ui::UiImage* getL();
    virtual lumin::ui::UiImage* getOpenHandBack();
    virtual lumin::ui::UiImage* getOk();
    virtual lumin::ui::UiImage* getC();
    virtual lumin::ui::UiText* getLeftHandGestureValue();
    virtual lumin::ui::UiText* getRightHandGestureValue();
    virtual lumin::ui::UiToggle* getKeypointModelToggle();
    virtual lumin::ui::UiToggle* getKeypointNamesToggle();
    virtual lumin::ModelNode* getKeypoint();


  protected:

    lumin::ui::UiText* LeftHandValue;
    lumin::ui::UiText* RightHandValue;
    lumin::ui::UiImage* Finger;
    lumin::ui::UiImage* Fist;
    lumin::ui::UiImage* Pinch;
    lumin::ui::UiImage* Thumb;
    lumin::ui::UiImage* L;
    lumin::ui::UiImage* OpenHandBack;
    lumin::ui::UiImage* Ok;
    lumin::ui::UiImage* C;
    lumin::ui::UiText* LeftHandGestureValue;
    lumin::ui::UiText* RightHandGestureValue;
    lumin::ui::UiToggle* keypointModelToggle;
    lumin::ui::UiToggle* keypointNamesToggle;
    lumin::ModelNode* Keypoint;


  private:

    friend class ::ExtendedPrefabManager;
    friend class Gesture;

    static PrefabBase* createPrefab(ExtendedPrefabManager* extendedPrefabManager, lumin::Node* root);

    static const PrefabDescriptor classPrefabDescriptor_;
    static const NodeReferences classNodeReferences_;

    GestureBase(ExtendedPrefabManager* extendedPrefabManager, lumin::Node* root);
    ~GestureBase() override;
  };
}
