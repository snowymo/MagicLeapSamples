// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --
//
// THE CONTENTS OF THIS FILE IS GENERATED BY CODE AND
// ANY MODIFICATIONS WILL BE OVERWRITTEN
//
// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --

// %BANNER_BEGIN%
// ---------------------------------------------------------------------
// %COPYRIGHT_BEGIN%
//
// Copyright (c) 2018 Magic Leap, Inc. All Rights Reserved.
// Use of this file is governed by the Creator Agreement, located
// here: https://id.magicleap.com/creator-terms
//
// %COPYRIGHT_END%
// ---------------------------------------------------------------------
// %BANNER_END%

// %SRC_VERSION%: 2

#pragma once

#include <PrefabBase.h>
#include <PrefabDescriptor.h>
#include <lumin/node/AudioNode.h>
#include <lumin/node/ModelNode.h>
#include <lumin/node/TransformNode.h>

class ExtendedPrefabManager;

namespace prefabs {

  class AudioModel;

  class AudioModelBase : public PrefabBase {
  public:

    static const PrefabDescriptor& getClassPrefabDescriptor();

  public:

    struct Names {
    public:

      static const std::string& audioParent;
      static const std::string& audioHolder;
      static const std::string& muteModel;
      static const std::string& offModel;
      static const std::string& onModel;
      static const std::string& playModel;
      static const std::string& loadedAudio;
      static const std::string& streamedAudio;
      static const std::string& outputAudio;

    protected:
      Names() = delete;
      ~Names() = delete;
    };

  public:

    const PrefabDescriptor& getPrefabDescriptor() const override;
    const NodeReferences& getNodeReferences() const override;

    virtual lumin::TransformNode* getAudioParent();
    virtual lumin::TransformNode* getAudioHolder();
    virtual lumin::ModelNode* getMuteModel();
    virtual lumin::ModelNode* getOffModel();
    virtual lumin::ModelNode* getOnModel();
    virtual lumin::ModelNode* getPlayModel();
    virtual lumin::AudioNode* getLoadedAudio();
    virtual lumin::AudioNode* getStreamedAudio();
    virtual lumin::AudioNode* getOutputAudio();


  protected:

    lumin::TransformNode* audioParent;
    lumin::TransformNode* audioHolder;
    lumin::ModelNode* muteModel;
    lumin::ModelNode* offModel;
    lumin::ModelNode* onModel;
    lumin::ModelNode* playModel;
    lumin::AudioNode* loadedAudio;
    lumin::AudioNode* streamedAudio;
    lumin::AudioNode* outputAudio;


  private:

    friend class ::ExtendedPrefabManager;
    friend class AudioModel;

    static PrefabBase* createPrefab(ExtendedPrefabManager* extendedPrefabManager, lumin::Node* root);

    static const PrefabDescriptor classPrefabDescriptor_;
    static const NodeReferences classNodeReferences_;

    AudioModelBase(ExtendedPrefabManager* extendedPrefabManager, lumin::Node* root);
    ~AudioModelBase() override;
  };
}
