// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --
//
// THE CONTENTS OF THIS FILE IS GENERATED BY CODE AND
// ANY MODIFICATIONS WILL BE OVERWRITTEN
//
// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --

// %BANNER_BEGIN%
// ---------------------------------------------------------------------
// %COPYRIGHT_BEGIN%
//
// Copyright (c) 2018 Magic Leap, Inc. All Rights Reserved.
// Use of this file is governed by the Creator Agreement, located
// here: https://id.magicleap.com/creator-terms
//
// %COPYRIGHT_END%
// ---------------------------------------------------------------------
// %BANNER_END%

// %SRC_VERSION%: 2

#pragma once

#include <PrefabBase.h>
#include <PrefabDescriptor.h>
#include <lumin/ui/node/UiButton.h>
#include <lumin/ui/node/UiDropDownList.h>
#include <lumin/ui/node/UiLinearLayout.h>
#include <lumin/ui/node/UiSlider.h>
#include <lumin/ui/node/UiText.h>
#include <lumin/ui/node/UiToggle.h>

class ExtendedPrefabManager;

namespace prefabs {

  class AudioEditor;

  class AudioEditorBase : public PrefabBase {
  public:

    static const PrefabDescriptor& getClassPrefabDescriptor();

  public:

    struct Names {
    public:

      static const std::string& topLayout;
      static const std::string& audioSwitcher;
      static const std::string& audioUI;
      static const std::string& audioTitle;
      static const std::string& pauseResumeButton;
      static const std::string& stopButton;
      static const std::string& muteButton;
      static const std::string& loop;
      static const std::string& spatial;
      static const std::string& rotate;
      static const std::string& volume;
      static const std::string& pitch;
      static const std::string& spatialLayout;
      static const std::string& innerAngle;
      static const std::string& outerAngle;
      static const std::string& outerGain;
      static const std::string& outerGainHF;
      static const std::string& minDistance;
      static const std::string& maxDistance;
      static const std::string& channelDistance;
      static const std::string& gain;
      static const std::string& gainLf;
      static const std::string& gainMf;
      static const std::string& gainHf;

    protected:
      Names() = delete;
      ~Names() = delete;
    };

  public:

    const PrefabDescriptor& getPrefabDescriptor() const override;
    const NodeReferences& getNodeReferences() const override;

    virtual lumin::ui::UiLinearLayout* getTopLayout();
    virtual lumin::ui::UiDropDownList* getAudioSwitcher();
    virtual lumin::ui::UiLinearLayout* getAudioUI();
    virtual lumin::ui::UiText* getAudioTitle();
    virtual lumin::ui::UiButton* getPauseResumeButton();
    virtual lumin::ui::UiButton* getStopButton();
    virtual lumin::ui::UiButton* getMuteButton();
    virtual lumin::ui::UiToggle* getLoop();
    virtual lumin::ui::UiToggle* getSpatial();
    virtual lumin::ui::UiToggle* getRotate();
    virtual lumin::ui::UiSlider* getVolume();
    virtual lumin::ui::UiSlider* getPitch();
    virtual lumin::ui::UiLinearLayout* getSpatialLayout();
    virtual lumin::ui::UiSlider* getInnerAngle();
    virtual lumin::ui::UiSlider* getOuterAngle();
    virtual lumin::ui::UiSlider* getOuterGain();
    virtual lumin::ui::UiSlider* getOuterGainHF();
    virtual lumin::ui::UiSlider* getMinDistance();
    virtual lumin::ui::UiSlider* getMaxDistance();
    virtual lumin::ui::UiSlider* getChannelDistance();
    virtual lumin::ui::UiSlider* getGain();
    virtual lumin::ui::UiSlider* getGainLf();
    virtual lumin::ui::UiSlider* getGainMf();
    virtual lumin::ui::UiSlider* getGainHf();


  protected:

    lumin::ui::UiLinearLayout* topLayout;
    lumin::ui::UiDropDownList* audioSwitcher;
    lumin::ui::UiLinearLayout* audioUI;
    lumin::ui::UiText* audioTitle;
    lumin::ui::UiButton* pauseResumeButton;
    lumin::ui::UiButton* stopButton;
    lumin::ui::UiButton* muteButton;
    lumin::ui::UiToggle* loop;
    lumin::ui::UiToggle* spatial;
    lumin::ui::UiToggle* rotate;
    lumin::ui::UiSlider* volume;
    lumin::ui::UiSlider* pitch;
    lumin::ui::UiLinearLayout* spatialLayout;
    lumin::ui::UiSlider* innerAngle;
    lumin::ui::UiSlider* outerAngle;
    lumin::ui::UiSlider* outerGain;
    lumin::ui::UiSlider* outerGainHF;
    lumin::ui::UiSlider* minDistance;
    lumin::ui::UiSlider* maxDistance;
    lumin::ui::UiSlider* channelDistance;
    lumin::ui::UiSlider* gain;
    lumin::ui::UiSlider* gainLf;
    lumin::ui::UiSlider* gainMf;
    lumin::ui::UiSlider* gainHf;

    virtual void audioSwitcher_audioSwitcherCallback(const lumin::ui::UiEventData& data, const std::vector<const lumin::ui::DropDownListItem*>& selection) = 0;
    virtual void pauseResumeButton_pauseResumeCallback(const lumin::ui::UiEventData& data) = 0;
    virtual void stopButton_stopCallback(const lumin::ui::UiEventData& data) = 0;
    virtual void muteButton_muteCallback(const lumin::ui::UiEventData& data) = 0;
    virtual void loop_loopCallback(const lumin::ui::UiEventData& data) = 0;
    virtual void spatial_spatialCallback(const lumin::ui::UiEventData& data) = 0;
    virtual void rotate_rotateCallback(const lumin::ui::UiEventData& data) = 0;
    virtual void volume_volumeCallback(const lumin::ui::UiEventData& data) = 0;
    virtual void pitch_pitchCallback(const lumin::ui::UiEventData& data) = 0;
    virtual void innerAngle_innerAngleCallback(const lumin::ui::UiEventData& data) = 0;
    virtual void outerAngle_outerAngleCallback(const lumin::ui::UiEventData& data) = 0;
    virtual void outerGain_outerGainCallback(const lumin::ui::UiEventData& data) = 0;
    virtual void outerGainHF_outerGainCallback(const lumin::ui::UiEventData& data) = 0;
    virtual void minDistance_minDistanceCallback(const lumin::ui::UiEventData& data) = 0;
    virtual void maxDistance_maxDistanceCallback(const lumin::ui::UiEventData& data) = 0;
    virtual void channelDistance_channelDistanceCallback(const lumin::ui::UiEventData& data) = 0;
    virtual void gain_gainCallback(const lumin::ui::UiEventData& data) = 0;
    virtual void gainLf_gainCallback(const lumin::ui::UiEventData& data) = 0;
    virtual void gainMf_gainCallback(const lumin::ui::UiEventData& data) = 0;
    virtual void gainHf_gainCallback(const lumin::ui::UiEventData& data) = 0;

  private:

    friend class ::ExtendedPrefabManager;
    friend class AudioEditor;

    static PrefabBase* createPrefab(ExtendedPrefabManager* extendedPrefabManager, lumin::Node* root);

    static const PrefabDescriptor classPrefabDescriptor_;
    static const NodeReferences classNodeReferences_;

    AudioEditorBase(ExtendedPrefabManager* extendedPrefabManager, lumin::Node* root);
    ~AudioEditorBase() override;
  };
}
