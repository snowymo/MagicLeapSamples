// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --
//
// THE CONTENTS OF THIS FILE IS GENERATED BY CODE AND
// ANY MODIFICATIONS WILL BE OVERWRITTEN
//
// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --

// %BANNER_BEGIN%
// ---------------------------------------------------------------------
// %COPYRIGHT_BEGIN%
//
// Copyright (c) 2018 Magic Leap, Inc. All Rights Reserved.
// Use of this file is governed by the Creator Agreement, located
// here: https://id.magicleap.com/creator-terms
//
// %COPYRIGHT_END%
// ---------------------------------------------------------------------
// %BANNER_END%

// %SRC_VERSION%: 2

#include <AudioModelBase.h>
#include <AudioModel.h>

namespace prefabs {

  const PrefabDescriptor& AudioModelBase::getClassPrefabDescriptor() {
    return classPrefabDescriptor_;
  }

  PrefabBase* AudioModelBase::createPrefab(ExtendedPrefabManager* extendedPrefabManager, lumin::Node* root) {
    PrefabBase* const prefab = new AudioModel(extendedPrefabManager, root);
    return prefab;
  }

  AudioModelBase::AudioModelBase(ExtendedPrefabManager* extendedPrefabManager, lumin::Node* root)
  : PrefabBase(extendedPrefabManager, root) {

    audioParent = lumin::TransformNode::CastFrom(root->findChild(Names::audioParent));
    audioHolder = lumin::TransformNode::CastFrom(root->findChild(Names::audioHolder));
    muteModel = lumin::ModelNode::CastFrom(root->findChild(Names::muteModel));
    offModel = lumin::ModelNode::CastFrom(root->findChild(Names::offModel));
    onModel = lumin::ModelNode::CastFrom(root->findChild(Names::onModel));
    playModel = lumin::ModelNode::CastFrom(root->findChild(Names::playModel));
    loadedAudio = lumin::AudioNode::CastFrom(root->findChild(Names::loadedAudio));
    streamedAudio = lumin::AudioNode::CastFrom(root->findChild(Names::streamedAudio));
    outputAudio = lumin::AudioNode::CastFrom(root->findChild(Names::outputAudio));

  }

  AudioModelBase::~AudioModelBase() {
  }

  const PrefabDescriptor& AudioModelBase::getPrefabDescriptor() const {
    return classPrefabDescriptor_;
  }

  const PrefabBase::NodeReferences& AudioModelBase::getNodeReferences() const {
    return classNodeReferences_;
  }

  lumin::TransformNode* AudioModelBase::getAudioParent() {
    return audioParent;
  }

  lumin::TransformNode* AudioModelBase::getAudioHolder() {
    return audioHolder;
  }

  lumin::ModelNode* AudioModelBase::getMuteModel() {
    return muteModel;
  }

  lumin::ModelNode* AudioModelBase::getOffModel() {
    return offModel;
  }

  lumin::ModelNode* AudioModelBase::getOnModel() {
    return onModel;
  }

  lumin::ModelNode* AudioModelBase::getPlayModel() {
    return playModel;
  }

  lumin::AudioNode* AudioModelBase::getLoadedAudio() {
    return loadedAudio;
  }

  lumin::AudioNode* AudioModelBase::getStreamedAudio() {
    return streamedAudio;
  }

  lumin::AudioNode* AudioModelBase::getOutputAudio() {
    return outputAudio;
  }

}
