// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --
//
// THE CONTENTS OF THIS FILE IS GENERATED BY CODE AND
// ANY MODIFICATIONS WILL BE OVERWRITTEN
//
// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --

// %BANNER_BEGIN%
// ---------------------------------------------------------------------
// %COPYRIGHT_BEGIN%
//
// Copyright (c) 2018 Magic Leap, Inc. All Rights Reserved.
// Use of this file is governed by the Creator Agreement, located
// here: https://id.magicleap.com/creator-terms
//
// %COPYRIGHT_END%
// ---------------------------------------------------------------------
// %BANNER_END%

// %SRC_VERSION%: 2

#include <prefabs.h>
#include <PrefabManager.h>
#include <AudioEditor.h>
#include <AudioModel.h>

namespace prefabs {

  const PrefabBase::NodeReferences AudioEditorBase::classNodeReferences_ = {
    "topLayout",
    "audioSwitcher",
    "audioUI",
    "audioTitle",
    "pauseResumeButton",
    "stopButton",
    "muteButton",
    "loop",
    "spatial",
    "rotate",
    "volume",
    "pitch",
    "spatialLayout",
    "innerAngle",
    "outerAngle",
    "outerGain",
    "outerGainHF",
    "minDistance",
    "maxDistance",
    "channelDistance",
    "gain",
    "gainLf",
    "gainMf",
    "gainHf"
  };

  const std::string& AudioEditorBase::Names::topLayout = AudioEditorBase::classNodeReferences_[0];
  const std::string& AudioEditorBase::Names::audioSwitcher = AudioEditorBase::classNodeReferences_[1];
  const std::string& AudioEditorBase::Names::audioUI = AudioEditorBase::classNodeReferences_[2];
  const std::string& AudioEditorBase::Names::audioTitle = AudioEditorBase::classNodeReferences_[3];
  const std::string& AudioEditorBase::Names::pauseResumeButton = AudioEditorBase::classNodeReferences_[4];
  const std::string& AudioEditorBase::Names::stopButton = AudioEditorBase::classNodeReferences_[5];
  const std::string& AudioEditorBase::Names::muteButton = AudioEditorBase::classNodeReferences_[6];
  const std::string& AudioEditorBase::Names::loop = AudioEditorBase::classNodeReferences_[7];
  const std::string& AudioEditorBase::Names::spatial = AudioEditorBase::classNodeReferences_[8];
  const std::string& AudioEditorBase::Names::rotate = AudioEditorBase::classNodeReferences_[9];
  const std::string& AudioEditorBase::Names::volume = AudioEditorBase::classNodeReferences_[10];
  const std::string& AudioEditorBase::Names::pitch = AudioEditorBase::classNodeReferences_[11];
  const std::string& AudioEditorBase::Names::spatialLayout = AudioEditorBase::classNodeReferences_[12];
  const std::string& AudioEditorBase::Names::innerAngle = AudioEditorBase::classNodeReferences_[13];
  const std::string& AudioEditorBase::Names::outerAngle = AudioEditorBase::classNodeReferences_[14];
  const std::string& AudioEditorBase::Names::outerGain = AudioEditorBase::classNodeReferences_[15];
  const std::string& AudioEditorBase::Names::outerGainHF = AudioEditorBase::classNodeReferences_[16];
  const std::string& AudioEditorBase::Names::minDistance = AudioEditorBase::classNodeReferences_[17];
  const std::string& AudioEditorBase::Names::maxDistance = AudioEditorBase::classNodeReferences_[18];
  const std::string& AudioEditorBase::Names::channelDistance = AudioEditorBase::classNodeReferences_[19];
  const std::string& AudioEditorBase::Names::gain = AudioEditorBase::classNodeReferences_[20];
  const std::string& AudioEditorBase::Names::gainLf = AudioEditorBase::classNodeReferences_[21];
  const std::string& AudioEditorBase::Names::gainMf = AudioEditorBase::classNodeReferences_[22];
  const std::string& AudioEditorBase::Names::gainHf = AudioEditorBase::classNodeReferences_[23];

  const PrefabDescriptor AudioEditorBase::classPrefabDescriptor_(
    0,
    "AudioEditor",
    "root",
    "/assets/scenes/AudioEditor.scene.xml",
    "/assets/scenes/AudioEditor.scene.res.xml");
  const PrefabBase::NodeReferences AudioModelBase::classNodeReferences_ = {
    "audioParent",
    "audioHolder",
    "muteModel",
    "offModel",
    "onModel",
    "playModel",
    "loadedAudio",
    "streamedAudio",
    "outputAudio"
  };

  const std::string& AudioModelBase::Names::audioParent = AudioModelBase::classNodeReferences_[0];
  const std::string& AudioModelBase::Names::audioHolder = AudioModelBase::classNodeReferences_[1];
  const std::string& AudioModelBase::Names::muteModel = AudioModelBase::classNodeReferences_[2];
  const std::string& AudioModelBase::Names::offModel = AudioModelBase::classNodeReferences_[3];
  const std::string& AudioModelBase::Names::onModel = AudioModelBase::classNodeReferences_[4];
  const std::string& AudioModelBase::Names::playModel = AudioModelBase::classNodeReferences_[5];
  const std::string& AudioModelBase::Names::loadedAudio = AudioModelBase::classNodeReferences_[6];
  const std::string& AudioModelBase::Names::streamedAudio = AudioModelBase::classNodeReferences_[7];
  const std::string& AudioModelBase::Names::outputAudio = AudioModelBase::classNodeReferences_[8];

  const PrefabDescriptor AudioModelBase::classPrefabDescriptor_(
    1,
    "AudioModel",
    "root",
    "/assets/scenes/AudioModel.scene.xml",
    "/assets/scenes/AudioModel.scene.res.xml");

  const PrefabDescriptorMap prefabDescriptorMap = {
    { AudioEditor::getClassPrefabDescriptor().getName(), AudioEditor::getClassPrefabDescriptor() },

    { AudioModel::getClassPrefabDescriptor().getName(), AudioModel::getClassPrefabDescriptor() }
  };

  struct VerifyNumberOfPrefabs {
    VerifyNumberOfPrefabs() { assert(prefabDescriptorMap.size() == numberOfPrefabs); }
  };

  VerifyNumberOfPrefabs verifyNumberOfPrefabs;
}

const ExtendedPrefabManager::CreatePrefab ExtendedPrefabManager::createPrefab[prefabs::numberOfPrefabs] = {
  ::prefabs::AudioEditor::createPrefab,
  ::prefabs::AudioModel::createPrefab
};
