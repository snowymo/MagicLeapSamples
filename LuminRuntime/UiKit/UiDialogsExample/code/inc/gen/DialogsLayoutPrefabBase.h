// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --
//
// THE CONTENTS OF THIS FILE IS GENERATED BY CODE AND
// ANY MODIFICATIONS WILL BE OVERWRITTEN
//
// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --

// %BANNER_BEGIN%
// ---------------------------------------------------------------------
// %COPYRIGHT_BEGIN%
//
// Copyright (c) 2018 Magic Leap, Inc. All Rights Reserved.
// Use of this file is governed by the Creator Agreement, located
// here: https://id.magicleap.com/creator-terms
//
// %COPYRIGHT_END%
// ---------------------------------------------------------------------
// %BANNER_END%

// %SRC_VERSION%: 2

#pragma once

#include <PrefabBase.h>
#include <PrefabDescriptor.h>
#include <lumin/ui/node/UiListView.h>
#include <lumin/ui/node/UiTab.h>

class ExtendedPrefabManager;

namespace prefabs {

  class DialogsLayoutPrefab;

  class DialogsLayoutPrefabBase : public PrefabBase {
  public:

    static const PrefabDescriptor& getClassPrefabDescriptor();

  public:

    struct Names {
    public:

      static const std::string& SADS_Tab;
      static const std::string& DADS_Tab;
      static const std::string& TDS_Tab;
      static const std::string& DS_ListView;

    protected:
      Names() = delete;
      ~Names() = delete;
    };

  public:

    const PrefabDescriptor& getPrefabDescriptor() const override;
    const NodeReferences& getNodeReferences() const override;

    virtual lumin::ui::UiTab* getSADS_Tab();
    virtual lumin::ui::UiTab* getDADS_Tab();
    virtual lumin::ui::UiTab* getTDS_Tab();
    virtual lumin::ui::UiListView* getDS_ListView();


  protected:

    lumin::ui::UiTab* SADS_Tab;
    lumin::ui::UiTab* DADS_Tab;
    lumin::ui::UiTab* TDS_Tab;
    lumin::ui::UiListView* DS_ListView;

    virtual void SADS_Tab_SingleActionDialogTabHandlers(const lumin::ui::UiEventData& data) = 0;
    virtual void DADS_Tab_DualActionDialogTabHandlers(const lumin::ui::UiEventData& data) = 0;
    virtual void TDS_Tab_TimedDialogTabHandlers(const lumin::ui::UiEventData& data) = 0;

  private:

    friend class ::ExtendedPrefabManager;
    friend class DialogsLayoutPrefab;

    static PrefabBase* createPrefab(ExtendedPrefabManager* extendedPrefabManager, lumin::Node* root);

    static const PrefabDescriptor classPrefabDescriptor_;
    static const NodeReferences classNodeReferences_;

    DialogsLayoutPrefabBase(ExtendedPrefabManager* extendedPrefabManager, lumin::Node* root);
    ~DialogsLayoutPrefabBase() override;
  };
}
