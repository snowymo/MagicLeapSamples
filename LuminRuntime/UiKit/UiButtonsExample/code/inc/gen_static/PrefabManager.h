// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --
//
// THE CONTENTS OF THIS FILE IS GENERATED BY CODE AND
// ANY MODIFICATIONS WILL BE OVERWRITTEN
//
// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --

// %BANNER_BEGIN%
// ---------------------------------------------------------------------
// %COPYRIGHT_BEGIN%
//
// Copyright (c) 2018 Magic Leap, Inc. All Rights Reserved.
// Use of this file is governed by the Creator Agreement, located
// here: https://id.magicleap.com/creator-terms
//
// %COPYRIGHT_END%
// ---------------------------------------------------------------------
// %BANNER_END%

// %SRC_VERSION%: 2

#pragma once

#include <DesignManager.h>
#include <PrefabDescriptor.h>
#include <PrefabBase.h>
#include <prefabs.h>

#include <lumin/Prism.h>
#include <lumin/node/Node.h>
#include <lumin/Consts.h>

class PrefabManager;

class ExtendedPrefabManager {
public:

  typedef prefabs::PrefabDescriptorMap PrefabDescriptorMap;
  static const PrefabDescriptorMap& getPrefabDescriptorMap();

public:

  ExtendedPrefabManager(lumin::Prism* prism);
  ~ExtendedPrefabManager();

  // Control the state of the Resource and Object models for the specified prefab
  using ModelState = DesignManager::ModelState;
  ModelState getModelState(const PrefabDescriptor& prefabDescriptor) const;
  void setModelState(const PrefabDescriptor& prefabDescriptor, ModelState newState);

  // Create a new instance of the specified prefab
  PrefabBase* spawn(const PrefabDescriptor& prefabDescriptor);
  template <typename T> T* spawn();

  // Destroy a previously created prefab instance
  void destroyPrefab(PrefabBase* prefab);

private:

  typedef PrefabBase* (*CreatePrefab)(ExtendedPrefabManager* extendedPrefabManager, lumin::Node* root);
  static const CreatePrefab createPrefab[prefabs::numberOfPrefabs];

private:

  lumin::Prism* const prism_;
  PrefabManager* const prefabManager_;
  ModelState modelStates_[prefabs::numberOfPrefabs];
  lumin::ResourceIDType prefabIds_[prefabs::numberOfPrefabs];
};

template <typename T> T* ExtendedPrefabManager::spawn() {
  return static_cast<T*>(spawn(T::getClassPrefabDescriptor()));
}
