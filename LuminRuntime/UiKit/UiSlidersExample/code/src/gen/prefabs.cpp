// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --
//
// THE CONTENTS OF THIS FILE IS GENERATED BY CODE AND
// ANY MODIFICATIONS WILL BE OVERWRITTEN
//
// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --

// %BANNER_BEGIN%
// ---------------------------------------------------------------------
// %COPYRIGHT_BEGIN%
//
// Copyright (c) 2018 Magic Leap, Inc. All Rights Reserved.
// Use of this file is governed by the Creator Agreement, located
// here: https://id.magicleap.com/creator-terms
//
// %COPYRIGHT_END%
// ---------------------------------------------------------------------
// %BANNER_END%

// %SRC_VERSION%: 2

#include <prefabs.h>
#include <PrefabManager.h>
#include <SlidersLayoutPrefab.h>

namespace prefabs {

  const PrefabBase::NodeReferences SlidersLayoutPrefabBase::classNodeReferences_ = {
    "SL_Label1",
    "SL_Slider1",
    "SE_Label1",
    "SL_Slider2",
    "SE_Label2",
    "SL_Slider3",
    "SE_Label3",
    "SL_Label8",
    "SL_Slider4",
    "SE_Label4",
    "SL_Slider5",
    "SE_Label5",
    "SL_Label13",
    "SL_ProgressBar",
    "SE_Label6"
  };

  const std::string& SlidersLayoutPrefabBase::Names::SL_Label1 = SlidersLayoutPrefabBase::classNodeReferences_[0];
  const std::string& SlidersLayoutPrefabBase::Names::SL_Slider1 = SlidersLayoutPrefabBase::classNodeReferences_[1];
  const std::string& SlidersLayoutPrefabBase::Names::SE_Label1 = SlidersLayoutPrefabBase::classNodeReferences_[2];
  const std::string& SlidersLayoutPrefabBase::Names::SL_Slider2 = SlidersLayoutPrefabBase::classNodeReferences_[3];
  const std::string& SlidersLayoutPrefabBase::Names::SE_Label2 = SlidersLayoutPrefabBase::classNodeReferences_[4];
  const std::string& SlidersLayoutPrefabBase::Names::SL_Slider3 = SlidersLayoutPrefabBase::classNodeReferences_[5];
  const std::string& SlidersLayoutPrefabBase::Names::SE_Label3 = SlidersLayoutPrefabBase::classNodeReferences_[6];
  const std::string& SlidersLayoutPrefabBase::Names::SL_Label8 = SlidersLayoutPrefabBase::classNodeReferences_[7];
  const std::string& SlidersLayoutPrefabBase::Names::SL_Slider4 = SlidersLayoutPrefabBase::classNodeReferences_[8];
  const std::string& SlidersLayoutPrefabBase::Names::SE_Label4 = SlidersLayoutPrefabBase::classNodeReferences_[9];
  const std::string& SlidersLayoutPrefabBase::Names::SL_Slider5 = SlidersLayoutPrefabBase::classNodeReferences_[10];
  const std::string& SlidersLayoutPrefabBase::Names::SE_Label5 = SlidersLayoutPrefabBase::classNodeReferences_[11];
  const std::string& SlidersLayoutPrefabBase::Names::SL_Label13 = SlidersLayoutPrefabBase::classNodeReferences_[12];
  const std::string& SlidersLayoutPrefabBase::Names::SL_ProgressBar = SlidersLayoutPrefabBase::classNodeReferences_[13];
  const std::string& SlidersLayoutPrefabBase::Names::SE_Label6 = SlidersLayoutPrefabBase::classNodeReferences_[14];

  const PrefabDescriptor SlidersLayoutPrefabBase::classPrefabDescriptor_(
    0,
    "SlidersLayoutPrefab",
    "root",
    "/assets/scenes/SlidersLayoutPrefab.scene.xml",
    "/assets/scenes/SlidersLayoutPrefab.scene.res.xml");

  const PrefabDescriptorMap prefabDescriptorMap = {
    { SlidersLayoutPrefab::getClassPrefabDescriptor().getName(), SlidersLayoutPrefab::getClassPrefabDescriptor() }
  };

  struct VerifyNumberOfPrefabs {
    VerifyNumberOfPrefabs() { assert(prefabDescriptorMap.size() == numberOfPrefabs); }
  };

  VerifyNumberOfPrefabs verifyNumberOfPrefabs;
}

const ExtendedPrefabManager::CreatePrefab ExtendedPrefabManager::createPrefab[prefabs::numberOfPrefabs] = {
  ::prefabs::SlidersLayoutPrefab::createPrefab
};
