// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --
//
// THE CONTENTS OF THIS FILE IS GENERATED BY CODE AND
// ANY MODIFICATIONS WILL BE OVERWRITTEN
//
// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --

// %BANNER_BEGIN%
// ---------------------------------------------------------------------
// %COPYRIGHT_BEGIN%
//
// Copyright (c) 2018 Magic Leap, Inc. All Rights Reserved.
// Use of this file is governed by the Creator Agreement, located
// here: https://id.magicleap.com/creator-terms
//
// %COPYRIGHT_END%
// ---------------------------------------------------------------------
// %BANNER_END%

// %SRC_VERSION%: 2

#include <SlidersLayoutPrefabBase.h>
#include <SlidersLayoutPrefab.h>

namespace prefabs {

  const PrefabDescriptor& SlidersLayoutPrefabBase::getClassPrefabDescriptor() {
    return classPrefabDescriptor_;
  }

  PrefabBase* SlidersLayoutPrefabBase::createPrefab(ExtendedPrefabManager* extendedPrefabManager, lumin::Node* root) {
    PrefabBase* const prefab = new SlidersLayoutPrefab(extendedPrefabManager, root);
    return prefab;
  }

  SlidersLayoutPrefabBase::SlidersLayoutPrefabBase(ExtendedPrefabManager* extendedPrefabManager, lumin::Node* root)
  : PrefabBase(extendedPrefabManager, root) {

    SL_Label1 = lumin::ui::UiText::CastFrom(root->findChild(Names::SL_Label1));
    SL_Slider1 = lumin::ui::UiSlider::CastFrom(root->findChild(Names::SL_Slider1));
    SE_Label1 = lumin::ui::UiText::CastFrom(root->findChild(Names::SE_Label1));
    SL_Slider2 = lumin::ui::UiSlider::CastFrom(root->findChild(Names::SL_Slider2));
    SE_Label2 = lumin::ui::UiText::CastFrom(root->findChild(Names::SE_Label2));
    SL_Slider3 = lumin::ui::UiSlider::CastFrom(root->findChild(Names::SL_Slider3));
    SE_Label3 = lumin::ui::UiText::CastFrom(root->findChild(Names::SE_Label3));
    SL_Label8 = lumin::ui::UiText::CastFrom(root->findChild(Names::SL_Label8));
    SL_Slider4 = lumin::ui::UiSlider::CastFrom(root->findChild(Names::SL_Slider4));
    SE_Label4 = lumin::ui::UiText::CastFrom(root->findChild(Names::SE_Label4));
    SL_Slider5 = lumin::ui::UiSlider::CastFrom(root->findChild(Names::SL_Slider5));
    SE_Label5 = lumin::ui::UiText::CastFrom(root->findChild(Names::SE_Label5));
    SL_Label13 = lumin::ui::UiText::CastFrom(root->findChild(Names::SL_Label13));
    SL_ProgressBar = lumin::ui::UiProgressBar::CastFrom(root->findChild(Names::SL_ProgressBar));
    SE_Label6 = lumin::ui::UiText::CastFrom(root->findChild(Names::SE_Label6));

    SL_Slider1->onSliderChangedSub(std::bind(&SlidersLayoutPrefabBase::SL_Slider1_DefaultSliderHandlers_onSliderChanged, this, std::placeholders::_1));
    SL_Slider1->onHoverEnterSub(std::bind(&SlidersLayoutPrefabBase::SL_Slider1_DefaultSliderHandlers_onHoverEnter, this, std::placeholders::_1));
    SL_Slider1->onHoverExitSub(std::bind(&SlidersLayoutPrefabBase::SL_Slider1_DefaultSliderHandlers_onHoverExit, this, std::placeholders::_1));
    SL_Slider1->onActivateSub(std::bind(&SlidersLayoutPrefabBase::SL_Slider1_DefaultSliderHandlers_onActivate, this, std::placeholders::_1));
    SL_Slider1->onLongPressSub(std::bind(&SlidersLayoutPrefabBase::SL_Slider1_DefaultSliderHandlers_onLongPress, this, std::placeholders::_1));
    SE_Label1->onUpdateSub(std::bind(&SlidersLayoutPrefabBase::SE_Label1_DefaultSliderLabelHandlers, this, std::placeholders::_1, std::placeholders::_2));
    SL_Slider2->onSliderChangedSub(std::bind(&SlidersLayoutPrefabBase::SL_Slider2_HorizontalLabelSliderHandlers_onSliderChanged, this, std::placeholders::_1));
    SL_Slider2->onHoverEnterSub(std::bind(&SlidersLayoutPrefabBase::SL_Slider2_HorizontalLabelSliderHandlers_onHoverEnter, this, std::placeholders::_1));
    SL_Slider2->onHoverExitSub(std::bind(&SlidersLayoutPrefabBase::SL_Slider2_HorizontalLabelSliderHandlers_onHoverExit, this, std::placeholders::_1));
    SL_Slider2->onActivateSub(std::bind(&SlidersLayoutPrefabBase::SL_Slider2_HorizontalLabelSliderHandlers_onActivate, this, std::placeholders::_1));
    SL_Slider2->onLongPressSub(std::bind(&SlidersLayoutPrefabBase::SL_Slider2_HorizontalLabelSliderHandlers_onLongPress, this, std::placeholders::_1));
    SE_Label2->onUpdateSub(std::bind(&SlidersLayoutPrefabBase::SE_Label2_HorizontalLabelSliderLabelHandlers, this, std::placeholders::_1, std::placeholders::_2));
    SL_Slider3->onSliderChangedSub(std::bind(&SlidersLayoutPrefabBase::SL_Slider3_HorizontalIconSliderHandlers_onSliderChanged, this, std::placeholders::_1));
    SL_Slider3->onHoverEnterSub(std::bind(&SlidersLayoutPrefabBase::SL_Slider3_HorizontalIconSliderHandlers_onHoverEnter, this, std::placeholders::_1));
    SL_Slider3->onHoverExitSub(std::bind(&SlidersLayoutPrefabBase::SL_Slider3_HorizontalIconSliderHandlers_onHoverExit, this, std::placeholders::_1));
    SL_Slider3->onActivateSub(std::bind(&SlidersLayoutPrefabBase::SL_Slider3_HorizontalIconSliderHandlers_onActivate, this, std::placeholders::_1));
    SL_Slider3->onLongPressSub(std::bind(&SlidersLayoutPrefabBase::SL_Slider3_HorizontalIconSliderHandlers_onLongPress, this, std::placeholders::_1));
    SE_Label3->onUpdateSub(std::bind(&SlidersLayoutPrefabBase::SE_Label3_HorizontalIconSliderLabelHandlers, this, std::placeholders::_1, std::placeholders::_2));
    SL_Slider4->onSliderChangedSub(std::bind(&SlidersLayoutPrefabBase::SL_Slider4_RadialIconSliderHandlers_onSliderChanged, this, std::placeholders::_1));
    SL_Slider4->onHoverEnterSub(std::bind(&SlidersLayoutPrefabBase::SL_Slider4_RadialIconSliderHandlers_onHoverEnter, this, std::placeholders::_1));
    SL_Slider4->onHoverExitSub(std::bind(&SlidersLayoutPrefabBase::SL_Slider4_RadialIconSliderHandlers_onHoverExit, this, std::placeholders::_1));
    SL_Slider4->onActivateSub(std::bind(&SlidersLayoutPrefabBase::SL_Slider4_RadialIconSliderHandlers_onActivate, this, std::placeholders::_1));
    SL_Slider4->onLongPressSub(std::bind(&SlidersLayoutPrefabBase::SL_Slider4_RadialIconSliderHandlers_onLongPress, this, std::placeholders::_1));
    SE_Label4->onUpdateSub(std::bind(&SlidersLayoutPrefabBase::SE_Label4_RadialSliderIconLabelHandlers, this, std::placeholders::_1, std::placeholders::_2));
    SL_Slider5->onSliderChangedSub(std::bind(&SlidersLayoutPrefabBase::SL_Slider5_SmallRadialIconSliderHandlers_onSliderChanged, this, std::placeholders::_1));
    SL_Slider5->onHoverEnterSub(std::bind(&SlidersLayoutPrefabBase::SL_Slider5_SmallRadialIconSliderHandlers_onHoverEnter, this, std::placeholders::_1));
    SL_Slider5->onHoverExitSub(std::bind(&SlidersLayoutPrefabBase::SL_Slider5_SmallRadialIconSliderHandlers_onHoverExit, this, std::placeholders::_1));
    SL_Slider5->onActivateSub(std::bind(&SlidersLayoutPrefabBase::SL_Slider5_SmallRadialIconSliderHandlers_onActivate, this, std::placeholders::_1));
    SL_Slider5->onLongPressSub(std::bind(&SlidersLayoutPrefabBase::SL_Slider5_SmallRadialIconSliderHandlers_onLongPress, this, std::placeholders::_1));
    SE_Label5->onUpdateSub(std::bind(&SlidersLayoutPrefabBase::SE_Label5_SmallRadialIconSliderLabelHandlers, this, std::placeholders::_1, std::placeholders::_2));
    SL_ProgressBar->onHoverEnterSub(std::bind(&SlidersLayoutPrefabBase::SL_ProgressBar_DefaultProgressBarHandlers_onHoverEnter, this, std::placeholders::_1));
    SL_ProgressBar->onHoverExitSub(std::bind(&SlidersLayoutPrefabBase::SL_ProgressBar_DefaultProgressBarHandlers_onHoverExit, this, std::placeholders::_1));
    SL_ProgressBar->onActivateSub(std::bind(&SlidersLayoutPrefabBase::SL_ProgressBar_DefaultProgressBarHandlers_onActivate, this, std::placeholders::_1));
    SL_ProgressBar->onLongPressSub(std::bind(&SlidersLayoutPrefabBase::SL_ProgressBar_DefaultProgressBarHandlers_onLongPress, this, std::placeholders::_1));
    SL_ProgressBar->onUpdateSub(std::bind(&SlidersLayoutPrefabBase::SL_ProgressBar_DefaultProgressBarHandlers_onUpdate, this, std::placeholders::_1, std::placeholders::_2));
    SE_Label6->onUpdateSub(std::bind(&SlidersLayoutPrefabBase::SE_Label6_DefaultProgressBarLabelHandlers, this, std::placeholders::_1, std::placeholders::_2));
  }

  SlidersLayoutPrefabBase::~SlidersLayoutPrefabBase() {
  }

  const PrefabDescriptor& SlidersLayoutPrefabBase::getPrefabDescriptor() const {
    return classPrefabDescriptor_;
  }

  const PrefabBase::NodeReferences& SlidersLayoutPrefabBase::getNodeReferences() const {
    return classNodeReferences_;
  }

  lumin::ui::UiText* SlidersLayoutPrefabBase::getSL_Label1() {
    return SL_Label1;
  }

  lumin::ui::UiSlider* SlidersLayoutPrefabBase::getSL_Slider1() {
    return SL_Slider1;
  }

  lumin::ui::UiText* SlidersLayoutPrefabBase::getSE_Label1() {
    return SE_Label1;
  }

  lumin::ui::UiSlider* SlidersLayoutPrefabBase::getSL_Slider2() {
    return SL_Slider2;
  }

  lumin::ui::UiText* SlidersLayoutPrefabBase::getSE_Label2() {
    return SE_Label2;
  }

  lumin::ui::UiSlider* SlidersLayoutPrefabBase::getSL_Slider3() {
    return SL_Slider3;
  }

  lumin::ui::UiText* SlidersLayoutPrefabBase::getSE_Label3() {
    return SE_Label3;
  }

  lumin::ui::UiText* SlidersLayoutPrefabBase::getSL_Label8() {
    return SL_Label8;
  }

  lumin::ui::UiSlider* SlidersLayoutPrefabBase::getSL_Slider4() {
    return SL_Slider4;
  }

  lumin::ui::UiText* SlidersLayoutPrefabBase::getSE_Label4() {
    return SE_Label4;
  }

  lumin::ui::UiSlider* SlidersLayoutPrefabBase::getSL_Slider5() {
    return SL_Slider5;
  }

  lumin::ui::UiText* SlidersLayoutPrefabBase::getSE_Label5() {
    return SE_Label5;
  }

  lumin::ui::UiText* SlidersLayoutPrefabBase::getSL_Label13() {
    return SL_Label13;
  }

  lumin::ui::UiProgressBar* SlidersLayoutPrefabBase::getSL_ProgressBar() {
    return SL_ProgressBar;
  }

  lumin::ui::UiText* SlidersLayoutPrefabBase::getSE_Label6() {
    return SE_Label6;
  }

}
