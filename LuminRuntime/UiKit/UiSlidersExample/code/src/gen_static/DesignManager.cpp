// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --
//
// THE CONTENTS OF THIS FILE IS GENERATED BY CODE AND
// ANY MODIFICATIONS WILL BE OVERWRITTEN
//
// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --

// %BANNER_BEGIN%
// ---------------------------------------------------------------------
// %COPYRIGHT_BEGIN%
//
// Copyright (c) 2018 Magic Leap, Inc. All Rights Reserved.
// Use of this file is governed by the Creator Agreement, located
// here: https://id.magicleap.com/creator-terms
//
// %COPYRIGHT_END%
// ---------------------------------------------------------------------
// %BANNER_END%

// %SRC_VERSION%: 2

#include <DesignManager.h>

#include <ml_logging.h>

DesignManager::DesignManager(lumin::Prism* prism)
: prism_(prism) {

  if (!prism_) {
    ML_LOG(Error, "SceneManager nullptr prism");
    abort();
  }
}

DesignManager::~DesignManager() {
}

void DesignManager::setModelState(const std::string& resourceModelPath, const std::string& objectModelPath, ModelState const newState, ModelState& modelState, std::string& objectModelName) {

  // Load the resource model
  if (modelState == ModelState::Unloaded && (newState == ModelState::ResourceModelLoaded || newState == ModelState::ResourceAndObjectModelLoaded)) {
    if (!prism_->loadResourceModel(resourceModelPath)) {
      ML_LOG(Error, "SceneManager failed to load resource model");
      abort();
    }
    modelState = ModelState::ResourceModelLoaded;
  }

  // Load the object model
  if (modelState == ModelState::ResourceModelLoaded && newState == ModelState::ResourceAndObjectModelLoaded) {
    if (!prism_->loadObjectModel(objectModelPath, objectModelName)) {
      ML_LOG(Error, "SceneManager failed to load object model");
      abort();
    }
    modelState = ModelState::ResourceAndObjectModelLoaded;
  }

  // Unload the object model
  if (modelState == ModelState::ResourceAndObjectModelLoaded && (newState == ModelState::ResourceModelLoaded || newState == ModelState::Unloaded)) {
    if (!prism_->unloadObjectModel(objectModelName)) {
      ML_LOG(Error, "SceneManager failed to unload object model");
      abort();
    }
    modelState = ModelState::ResourceModelLoaded;
    objectModelName.clear();
  }

  // Currently there is no effective way to unload the resource model
}
