// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --
//
// THE CONTENTS OF THIS FILE IS GENERATED BY CODE AND
// ANY MODIFICATIONS WILL BE OVERWRITTEN
//
// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --

// %BANNER_BEGIN%
// ---------------------------------------------------------------------
// %COPYRIGHT_BEGIN%
//
// Copyright (c) 2018 Magic Leap, Inc. All Rights Reserved.
// Use of this file is governed by the Creator Agreement, located
// here: https://id.magicleap.com/creator-terms
//
// %COPYRIGHT_END%
// ---------------------------------------------------------------------
// %BANNER_END%

// %SRC_VERSION%: 2

#pragma once

#include <PrefabBase.h>
#include <PrefabDescriptor.h>
#include <lumin/ui/node/UiProgressBar.h>
#include <lumin/ui/node/UiSlider.h>
#include <lumin/ui/node/UiText.h>

class ExtendedPrefabManager;

namespace prefabs {

  class SlidersLayoutPrefab;

  class SlidersLayoutPrefabBase : public PrefabBase {
  public:

    static const PrefabDescriptor& getClassPrefabDescriptor();

  public:

    struct Names {
    public:

      static const std::string& SL_Label1;
      static const std::string& SL_Slider1;
      static const std::string& SE_Label1;
      static const std::string& SL_Slider2;
      static const std::string& SE_Label2;
      static const std::string& SL_Slider3;
      static const std::string& SE_Label3;
      static const std::string& SL_Label8;
      static const std::string& SL_Slider4;
      static const std::string& SE_Label4;
      static const std::string& SL_Slider5;
      static const std::string& SE_Label5;
      static const std::string& SL_Label13;
      static const std::string& SL_ProgressBar;
      static const std::string& SE_Label6;

    protected:
      Names() = delete;
      ~Names() = delete;
    };

  public:

    const PrefabDescriptor& getPrefabDescriptor() const override;
    const NodeReferences& getNodeReferences() const override;

    virtual lumin::ui::UiText* getSL_Label1();
    virtual lumin::ui::UiSlider* getSL_Slider1();
    virtual lumin::ui::UiText* getSE_Label1();
    virtual lumin::ui::UiSlider* getSL_Slider2();
    virtual lumin::ui::UiText* getSE_Label2();
    virtual lumin::ui::UiSlider* getSL_Slider3();
    virtual lumin::ui::UiText* getSE_Label3();
    virtual lumin::ui::UiText* getSL_Label8();
    virtual lumin::ui::UiSlider* getSL_Slider4();
    virtual lumin::ui::UiText* getSE_Label4();
    virtual lumin::ui::UiSlider* getSL_Slider5();
    virtual lumin::ui::UiText* getSE_Label5();
    virtual lumin::ui::UiText* getSL_Label13();
    virtual lumin::ui::UiProgressBar* getSL_ProgressBar();
    virtual lumin::ui::UiText* getSE_Label6();


  protected:

    lumin::ui::UiText* SL_Label1;
    lumin::ui::UiSlider* SL_Slider1;
    lumin::ui::UiText* SE_Label1;
    lumin::ui::UiSlider* SL_Slider2;
    lumin::ui::UiText* SE_Label2;
    lumin::ui::UiSlider* SL_Slider3;
    lumin::ui::UiText* SE_Label3;
    lumin::ui::UiText* SL_Label8;
    lumin::ui::UiSlider* SL_Slider4;
    lumin::ui::UiText* SE_Label4;
    lumin::ui::UiSlider* SL_Slider5;
    lumin::ui::UiText* SE_Label5;
    lumin::ui::UiText* SL_Label13;
    lumin::ui::UiProgressBar* SL_ProgressBar;
    lumin::ui::UiText* SE_Label6;

    virtual void SL_Slider1_DefaultSliderHandlers_onSliderChanged(const lumin::ui::UiEventData& data) = 0;
    virtual void SL_Slider1_DefaultSliderHandlers_onHoverEnter(const lumin::ui::UiEventData& data) = 0;
    virtual void SL_Slider1_DefaultSliderHandlers_onHoverExit(const lumin::ui::UiEventData& data) = 0;
    virtual void SL_Slider1_DefaultSliderHandlers_onActivate(const lumin::ui::UiEventData& data) = 0;
    virtual void SL_Slider1_DefaultSliderHandlers_onLongPress(const lumin::ui::UiEventData& data) = 0;
    virtual void SE_Label1_DefaultSliderLabelHandlers(const lumin::ui::UiEventData& data, const float dTime) = 0;
    virtual void SL_Slider2_HorizontalLabelSliderHandlers_onSliderChanged(const lumin::ui::UiEventData& data) = 0;
    virtual void SL_Slider2_HorizontalLabelSliderHandlers_onHoverEnter(const lumin::ui::UiEventData& data) = 0;
    virtual void SL_Slider2_HorizontalLabelSliderHandlers_onHoverExit(const lumin::ui::UiEventData& data) = 0;
    virtual void SL_Slider2_HorizontalLabelSliderHandlers_onActivate(const lumin::ui::UiEventData& data) = 0;
    virtual void SL_Slider2_HorizontalLabelSliderHandlers_onLongPress(const lumin::ui::UiEventData& data) = 0;
    virtual void SE_Label2_HorizontalLabelSliderLabelHandlers(const lumin::ui::UiEventData& data, const float dTime) = 0;
    virtual void SL_Slider3_HorizontalIconSliderHandlers_onSliderChanged(const lumin::ui::UiEventData& data) = 0;
    virtual void SL_Slider3_HorizontalIconSliderHandlers_onHoverEnter(const lumin::ui::UiEventData& data) = 0;
    virtual void SL_Slider3_HorizontalIconSliderHandlers_onHoverExit(const lumin::ui::UiEventData& data) = 0;
    virtual void SL_Slider3_HorizontalIconSliderHandlers_onActivate(const lumin::ui::UiEventData& data) = 0;
    virtual void SL_Slider3_HorizontalIconSliderHandlers_onLongPress(const lumin::ui::UiEventData& data) = 0;
    virtual void SE_Label3_HorizontalIconSliderLabelHandlers(const lumin::ui::UiEventData& data, const float dTime) = 0;
    virtual void SL_Slider4_RadialIconSliderHandlers_onSliderChanged(const lumin::ui::UiEventData& data) = 0;
    virtual void SL_Slider4_RadialIconSliderHandlers_onHoverEnter(const lumin::ui::UiEventData& data) = 0;
    virtual void SL_Slider4_RadialIconSliderHandlers_onHoverExit(const lumin::ui::UiEventData& data) = 0;
    virtual void SL_Slider4_RadialIconSliderHandlers_onActivate(const lumin::ui::UiEventData& data) = 0;
    virtual void SL_Slider4_RadialIconSliderHandlers_onLongPress(const lumin::ui::UiEventData& data) = 0;
    virtual void SE_Label4_RadialSliderIconLabelHandlers(const lumin::ui::UiEventData& data, const float dTime) = 0;
    virtual void SL_Slider5_SmallRadialIconSliderHandlers_onSliderChanged(const lumin::ui::UiEventData& data) = 0;
    virtual void SL_Slider5_SmallRadialIconSliderHandlers_onHoverEnter(const lumin::ui::UiEventData& data) = 0;
    virtual void SL_Slider5_SmallRadialIconSliderHandlers_onHoverExit(const lumin::ui::UiEventData& data) = 0;
    virtual void SL_Slider5_SmallRadialIconSliderHandlers_onActivate(const lumin::ui::UiEventData& data) = 0;
    virtual void SL_Slider5_SmallRadialIconSliderHandlers_onLongPress(const lumin::ui::UiEventData& data) = 0;
    virtual void SE_Label5_SmallRadialIconSliderLabelHandlers(const lumin::ui::UiEventData& data, const float dTime) = 0;
    virtual void SL_ProgressBar_DefaultProgressBarHandlers_onHoverEnter(const lumin::ui::UiEventData& data) = 0;
    virtual void SL_ProgressBar_DefaultProgressBarHandlers_onHoverExit(const lumin::ui::UiEventData& data) = 0;
    virtual void SL_ProgressBar_DefaultProgressBarHandlers_onActivate(const lumin::ui::UiEventData& data) = 0;
    virtual void SL_ProgressBar_DefaultProgressBarHandlers_onLongPress(const lumin::ui::UiEventData& data) = 0;
    virtual void SL_ProgressBar_DefaultProgressBarHandlers_onUpdate(const lumin::ui::UiEventData& data, const float dTime) = 0;
    virtual void SE_Label6_DefaultProgressBarLabelHandlers(const lumin::ui::UiEventData& data, const float dTime) = 0;

  private:

    friend class ::ExtendedPrefabManager;
    friend class SlidersLayoutPrefab;

    static PrefabBase* createPrefab(ExtendedPrefabManager* extendedPrefabManager, lumin::Node* root);

    static const PrefabDescriptor classPrefabDescriptor_;
    static const NodeReferences classNodeReferences_;

    SlidersLayoutPrefabBase(ExtendedPrefabManager* extendedPrefabManager, lumin::Node* root);
    ~SlidersLayoutPrefabBase() override;
  };
}
