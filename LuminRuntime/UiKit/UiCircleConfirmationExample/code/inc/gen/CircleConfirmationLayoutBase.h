// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --
//
// THE CONTENTS OF THIS FILE IS GENERATED BY CODE AND
// ANY MODIFICATIONS WILL BE OVERWRITTEN
//
// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --

// %BANNER_BEGIN%
// ---------------------------------------------------------------------
// %COPYRIGHT_BEGIN%
//
// Copyright (c) 2018 Magic Leap, Inc. All Rights Reserved.
// Use of this file is governed by the Creator Agreement, located
// here: https://id.magicleap.com/creator-terms
//
// %COPYRIGHT_END%
// ---------------------------------------------------------------------
// %BANNER_END%

// %SRC_VERSION%: 2

#pragma once

#include <PrefabBase.h>
#include <PrefabDescriptor.h>
#include <lumin/node/TransformNode.h>
#include <lumin/ui/node/UiTab.h>
#include <lumin/ui/node/UiText.h>

class ExtendedPrefabManager;

namespace prefabs {

  class CircleConfirmationLayout;

  class CircleConfirmationLayoutBase : public PrefabBase {
  public:

    static const PrefabDescriptor& getClassPrefabDescriptor();

  public:

    struct Names {
    public:

      static const std::string& CCM_Placeholder;
      static const std::string& CCM_Message;
      static const std::string& CCM_Button;

    protected:
      Names() = delete;
      ~Names() = delete;
    };

  public:

    const PrefabDescriptor& getPrefabDescriptor() const override;
    const NodeReferences& getNodeReferences() const override;

    virtual lumin::TransformNode* getCCM_Placeholder();
    virtual lumin::ui::UiText* getCCM_Message();
    virtual lumin::ui::UiTab* getCCM_Button();

    virtual const std::string getMessage() const;
    virtual void setMessage(const std::string& newValue);


  protected:

    lumin::TransformNode* CCM_Placeholder;
    lumin::ui::UiText* CCM_Message;
    lumin::ui::UiTab* CCM_Button;

    virtual void CCM_Button_CCM_Handlers_ResetCircleConfirmation(const lumin::ui::UiEventData& data) = 0;

  private:

    friend class ::ExtendedPrefabManager;
    friend class CircleConfirmationLayout;

    static PrefabBase* createPrefab(ExtendedPrefabManager* extendedPrefabManager, lumin::Node* root);

    static const PrefabDescriptor classPrefabDescriptor_;
    static const NodeReferences classNodeReferences_;

    CircleConfirmationLayoutBase(ExtendedPrefabManager* extendedPrefabManager, lumin::Node* root);
    ~CircleConfirmationLayoutBase() override;
  };
}
