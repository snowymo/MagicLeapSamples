// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --
//
// THE CONTENTS OF THIS FILE IS GENERATED BY CODE AND
// ANY MODIFICATIONS WILL BE OVERWRITTEN
//
// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --

// %BANNER_BEGIN%
// ---------------------------------------------------------------------
// %COPYRIGHT_BEGIN%
//
// Copyright (c) 2018 Magic Leap, Inc. All Rights Reserved.
// Use of this file is governed by the Creator Agreement, located
// here: https://id.magicleap.com/creator-terms
//
// %COPYRIGHT_END%
// ---------------------------------------------------------------------
// %BANNER_END%

// %SRC_VERSION%: 2

#include <TextEditPrefabBase.h>
#include <TextEditPrefab.h>

namespace prefabs {

  const PrefabDescriptor& TextEditPrefabBase::getClassPrefabDescriptor() {
    return classPrefabDescriptor_;
  }

  PrefabBase* TextEditPrefabBase::createPrefab(ExtendedPrefabManager* extendedPrefabManager, lumin::Node* root) {
    PrefabBase* const prefab = new TextEditPrefab(extendedPrefabManager, root);
    return prefab;
  }

  TextEditPrefabBase::TextEditPrefabBase(ExtendedPrefabManager* extendedPrefabManager, lumin::Node* root)
  : PrefabBase(extendedPrefabManager, root) {

    SingleLineTextEdit = lumin::ui::UiTextEdit::CastFrom(root->findChild(Names::SingleLineTextEdit));
    MultiLineTextEdit = lumin::ui::UiTextEdit::CastFrom(root->findChild(Names::MultiLineTextEdit));
    CharRatio = lumin::ui::UiText::CastFrom(root->findChild(Names::CharRatio));
    PasswordTextEdit = lumin::ui::UiTextEdit::CastFrom(root->findChild(Names::PasswordTextEdit));
    PasswordRequirements = lumin::ui::UiText::CastFrom(root->findChild(Names::PasswordRequirements));
    URLTextEdit = lumin::ui::UiTextEdit::CastFrom(root->findChild(Names::URLTextEdit));
    NumericTextEdit = lumin::ui::UiTextEdit::CastFrom(root->findChild(Names::NumericTextEdit));
    NumericRequirements = lumin::ui::UiText::CastFrom(root->findChild(Names::NumericRequirements));

    SingleLineTextEdit->onKeyboardEventSub(std::bind(&TextEditPrefabBase::SingleLineTextEdit_SingleLineHandlers, this, std::placeholders::_1, std::placeholders::_2));
    MultiLineTextEdit->onKeyboardEventSub(std::bind(&TextEditPrefabBase::MultiLineTextEdit_MultiLineHandlers_onKeyboardEvent, this, std::placeholders::_1, std::placeholders::_2));
    MultiLineTextEdit->onTextChangedSub(std::bind(&TextEditPrefabBase::MultiLineTextEdit_MultiLineHandlers_onTextChanged, this, std::placeholders::_1));
    PasswordTextEdit->onHoverEnterSub(std::bind(&TextEditPrefabBase::PasswordTextEdit_PasswordHandlers_onHoverEnter, this, std::placeholders::_1));
    PasswordTextEdit->onHoverExitSub(std::bind(&TextEditPrefabBase::PasswordTextEdit_PasswordHandlers_onHoverExit, this, std::placeholders::_1));
    URLTextEdit->onKeyboardEventSub(std::bind(&TextEditPrefabBase::URLTextEdit_UrlHandlers, this, std::placeholders::_1, std::placeholders::_2));
    NumericTextEdit->onHoverEnterSub(std::bind(&TextEditPrefabBase::NumericTextEdit_NumericHandlers_onHoverEnter, this, std::placeholders::_1));
    NumericTextEdit->onHoverExitSub(std::bind(&TextEditPrefabBase::NumericTextEdit_NumericHandlers_onHoverExit, this, std::placeholders::_1));
    NumericTextEdit->onTextChangedSub(std::bind(&TextEditPrefabBase::NumericTextEdit_NumericHandlers_onTextChanged, this, std::placeholders::_1));
    NumericTextEdit->onKeyboardEventSub(std::bind(&TextEditPrefabBase::NumericTextEdit_NumericHandlers_onKeyboardEvent, this, std::placeholders::_1, std::placeholders::_2));
  }

  TextEditPrefabBase::~TextEditPrefabBase() {
  }

  const PrefabDescriptor& TextEditPrefabBase::getPrefabDescriptor() const {
    return classPrefabDescriptor_;
  }

  const PrefabBase::NodeReferences& TextEditPrefabBase::getNodeReferences() const {
    return classNodeReferences_;
  }

  lumin::ui::UiTextEdit* TextEditPrefabBase::getSingleLineTextEdit() {
    return SingleLineTextEdit;
  }

  lumin::ui::UiTextEdit* TextEditPrefabBase::getMultiLineTextEdit() {
    return MultiLineTextEdit;
  }

  lumin::ui::UiText* TextEditPrefabBase::getCharRatio() {
    return CharRatio;
  }

  lumin::ui::UiTextEdit* TextEditPrefabBase::getPasswordTextEdit() {
    return PasswordTextEdit;
  }

  lumin::ui::UiText* TextEditPrefabBase::getPasswordRequirements() {
    return PasswordRequirements;
  }

  lumin::ui::UiTextEdit* TextEditPrefabBase::getURLTextEdit() {
    return URLTextEdit;
  }

  lumin::ui::UiTextEdit* TextEditPrefabBase::getNumericTextEdit() {
    return NumericTextEdit;
  }

  lumin::ui::UiText* TextEditPrefabBase::getNumericRequirements() {
    return NumericRequirements;
  }

}
