// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --
//
// THE CONTENTS OF THIS FILE IS GENERATED BY CODE AND
// ANY MODIFICATIONS WILL BE OVERWRITTEN
//
// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --

// %BANNER_BEGIN%
// ---------------------------------------------------------------------
// %COPYRIGHT_BEGIN%
//
// Copyright (c) 2018 Magic Leap, Inc. All Rights Reserved.
// Use of this file is governed by the Creator Agreement, located
// here: https://id.magicleap.com/creator-terms
//
// %COPYRIGHT_END%
// ---------------------------------------------------------------------
// %BANNER_END%

// %SRC_VERSION%: 2

#include <prefabs.h>
#include <PrefabManager.h>
#include <LoadingSpinners.h>

namespace prefabs {

  const PrefabBase::NodeReferences LoadingSpinnersBase::classNodeReferences_ = {
  };

  const PrefabDescriptor LoadingSpinnersBase::classPrefabDescriptor_(
    0,
    "LoadingSpinners",
    "root",
    "/assets/scenes/LoadingSpinners.scene.xml",
    "/assets/scenes/LoadingSpinners.scene.res.xml");

  const PrefabDescriptorMap prefabDescriptorMap = {
    { LoadingSpinners::getClassPrefabDescriptor().getName(), LoadingSpinners::getClassPrefabDescriptor() }
  };

  struct VerifyNumberOfPrefabs {
    VerifyNumberOfPrefabs() { assert(prefabDescriptorMap.size() == numberOfPrefabs); }
  };

  VerifyNumberOfPrefabs verifyNumberOfPrefabs;
}

const ExtendedPrefabManager::CreatePrefab ExtendedPrefabManager::createPrefab[prefabs::numberOfPrefabs] = {
  ::prefabs::LoadingSpinners::createPrefab
};
