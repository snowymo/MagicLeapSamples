// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --
//
// THE CONTENTS OF THIS FILE IS GENERATED BY CODE AND
// ANY MODIFICATIONS WILL BE OVERWRITTEN
//
// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --

// %BANNER_BEGIN%
// ---------------------------------------------------------------------
// %COPYRIGHT_BEGIN%
//
// Copyright (c) 2018 Magic Leap, Inc. All Rights Reserved.
// Use of this file is governed by the Creator Agreement, located
// here: https://id.magicleap.com/creator-terms
//
// %COPYRIGHT_END%
// ---------------------------------------------------------------------
// %BANNER_END%

// %SRC_VERSION%: 2

#include <CursorsDisplayPrefabBase.h>
#include <CursorsDisplayPrefab.h>

namespace prefabs {

  const PrefabDescriptor& CursorsDisplayPrefabBase::getClassPrefabDescriptor() {
    return classPrefabDescriptor_;
  }

  PrefabBase* CursorsDisplayPrefabBase::createPrefab(ExtendedPrefabManager* extendedPrefabManager, lumin::Node* root) {
    PrefabBase* const prefab = new CursorsDisplayPrefab(extendedPrefabManager, root);
    return prefab;
  }

  CursorsDisplayPrefabBase::CursorsDisplayPrefabBase(ExtendedPrefabManager* extendedPrefabManager, lumin::Node* root)
  : PrefabBase(extendedPrefabManager, root) {

    CC_GridLayout = lumin::ui::UiGridLayout::CastFrom(root->findChild(Names::CC_GridLayout));
    CC_Panel1 = lumin::ui::UiPanel::CastFrom(root->findChild(Names::CC_Panel1));
    CC_Panel2 = lumin::ui::UiPanel::CastFrom(root->findChild(Names::CC_Panel2));
    CC_Panel3 = lumin::ui::UiPanel::CastFrom(root->findChild(Names::CC_Panel3));
    CC_Panel4 = lumin::ui::UiPanel::CastFrom(root->findChild(Names::CC_Panel4));
    CC_Panel5 = lumin::ui::UiPanel::CastFrom(root->findChild(Names::CC_Panel5));
    CC_Panel6 = lumin::ui::UiPanel::CastFrom(root->findChild(Names::CC_Panel6));
    CC_Panel7 = lumin::ui::UiPanel::CastFrom(root->findChild(Names::CC_Panel7));
    CC_ColorPicker = lumin::ui::UiColorPicker::CastFrom(root->findChild(Names::CC_ColorPicker));

    CC_Panel1->onPanelEnterSub(std::bind(&CursorsDisplayPrefabBase::CC_Panel1_ChangeCursorDefaultHandler, this, std::placeholders::_1));
    CC_Panel2->onPanelEnterSub(std::bind(&CursorsDisplayPrefabBase::CC_Panel2_ChangeCursorBrowserDefault, this, std::placeholders::_1));
    CC_Panel3->onPanelEnterSub(std::bind(&CursorsDisplayPrefabBase::CC_Panel3_ChangeCursorBrowserPointer, this, std::placeholders::_1));
    CC_Panel4->onPanelEnterSub(std::bind(&CursorsDisplayPrefabBase::CC_Panel4_ChangeCursorTextInput, this, std::placeholders::_1));
    CC_Panel5->onPanelEnterSub(std::bind(&CursorsDisplayPrefabBase::CC_Panel5_ChangeCursorCrosshair, this, std::placeholders::_1));
    CC_Panel6->onPanelEnterSub(std::bind(&CursorsDisplayPrefabBase::CC_Panel6_ChangeCursorMove, this, std::placeholders::_1));
    CC_Panel7->onPanelEnterSub(std::bind(&CursorsDisplayPrefabBase::CC_Panel7_ChangeCursorScroll, this, std::placeholders::_1));
    CC_ColorPicker->onCancelSub(std::bind(&CursorsDisplayPrefabBase::CC_ColorPicker_ColorChanged_onCancel, this, std::placeholders::_1, std::placeholders::_2));
    CC_ColorPicker->onColorChangedSub(std::bind(&CursorsDisplayPrefabBase::CC_ColorPicker_ColorChanged_onColorChanged, this, std::placeholders::_1, std::placeholders::_2));
  }

  CursorsDisplayPrefabBase::~CursorsDisplayPrefabBase() {
  }

  const PrefabDescriptor& CursorsDisplayPrefabBase::getPrefabDescriptor() const {
    return classPrefabDescriptor_;
  }

  const PrefabBase::NodeReferences& CursorsDisplayPrefabBase::getNodeReferences() const {
    return classNodeReferences_;
  }

  lumin::ui::UiGridLayout* CursorsDisplayPrefabBase::getCC_GridLayout() {
    return CC_GridLayout;
  }

  lumin::ui::UiPanel* CursorsDisplayPrefabBase::getCC_Panel1() {
    return CC_Panel1;
  }

  lumin::ui::UiPanel* CursorsDisplayPrefabBase::getCC_Panel2() {
    return CC_Panel2;
  }

  lumin::ui::UiPanel* CursorsDisplayPrefabBase::getCC_Panel3() {
    return CC_Panel3;
  }

  lumin::ui::UiPanel* CursorsDisplayPrefabBase::getCC_Panel4() {
    return CC_Panel4;
  }

  lumin::ui::UiPanel* CursorsDisplayPrefabBase::getCC_Panel5() {
    return CC_Panel5;
  }

  lumin::ui::UiPanel* CursorsDisplayPrefabBase::getCC_Panel6() {
    return CC_Panel6;
  }

  lumin::ui::UiPanel* CursorsDisplayPrefabBase::getCC_Panel7() {
    return CC_Panel7;
  }

  lumin::ui::UiColorPicker* CursorsDisplayPrefabBase::getCC_ColorPicker() {
    return CC_ColorPicker;
  }

}
