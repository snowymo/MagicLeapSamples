// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --
//
// THE CONTENTS OF THIS FILE IS GENERATED BY CODE AND
// ANY MODIFICATIONS WILL BE OVERWRITTEN
//
// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --

// %BANNER_BEGIN%
// ---------------------------------------------------------------------
// %COPYRIGHT_BEGIN%
//
// Copyright (c) 2018 Magic Leap, Inc. All Rights Reserved.
// Use of this file is governed by the Creator Agreement, located
// here: https://id.magicleap.com/creator-terms
//
// %COPYRIGHT_END%
// ---------------------------------------------------------------------
// %BANNER_END%

// %SRC_VERSION%: 2

#include <VideoUIBase.h>
#include <VideoUI.h>

namespace prefabs {

  const PrefabDescriptor& VideoUIBase::getClassPrefabDescriptor() {
    return classPrefabDescriptor_;
  }

  PrefabBase* VideoUIBase::createPrefab(ExtendedPrefabManager* extendedPrefabManager, lumin::Node* root) {
    PrefabBase* const prefab = new VideoUI(extendedPrefabManager, root);
    return prefab;
  }

  VideoUIBase::VideoUIBase(ExtendedPrefabManager* extendedPrefabManager, lumin::Node* root)
  : PrefabBase(extendedPrefabManager, root) {

    cursorVisiblePanel = lumin::ui::UiPanel::CastFrom(root->findChild(Names::cursorVisiblePanel));
    topLayout = lumin::ui::UiLinearLayout::CastFrom(root->findChild(Names::topLayout));
    title = lumin::ui::UiText::CastFrom(root->findChild(Names::title));
    videoUI = lumin::ui::UiRectLayout::CastFrom(root->findChild(Names::videoUI));
    videoPlaceholderRoot = lumin::TransformNode::CastFrom(root->findChild(Names::videoPlaceholderRoot));
    videoPlaceholder = lumin::ui::UiImage::CastFrom(root->findChild(Names::videoPlaceholder));
    playButton = lumin::ui::UiButton::CastFrom(root->findChild(Names::playButton));
    fullMenu = lumin::ui::UiLinearLayout::CastFrom(root->findChild(Names::fullMenu));
    videoSlider = lumin::ui::UiSlider::CastFrom(root->findChild(Names::videoSlider));
    fullToolbar = lumin::ui::UiGridLayout::CastFrom(root->findChild(Names::fullToolbar));
    videoToolbar = lumin::ui::UiLinearLayout::CastFrom(root->findChild(Names::videoToolbar));
    playerButton = lumin::ui::UiRectLayout::CastFrom(root->findChild(Names::playerButton));
    pauseButton = lumin::ui::UiButton::CastFrom(root->findChild(Names::pauseButton));
    miniPlayButton = lumin::ui::UiButton::CastFrom(root->findChild(Names::miniPlayButton));
    replayButton = lumin::ui::UiButton::CastFrom(root->findChild(Names::replayButton));
    volumeButton = lumin::ui::UiButton::CastFrom(root->findChild(Names::volumeButton));
    muteButton = lumin::ui::UiButton::CastFrom(root->findChild(Names::muteButton));
    volumeSlider = lumin::ui::UiSlider::CastFrom(root->findChild(Names::volumeSlider));
    videoTime = lumin::ui::UiText::CastFrom(root->findChild(Names::videoTime));
    videoMenuIcon = lumin::ui::UiButton::CastFrom(root->findChild(Names::videoMenuIcon));
    errorMsg = lumin::ui::UiText::CastFrom(root->findChild(Names::errorMsg));
    settingsList = lumin::ui::UiListView::CastFrom(root->findChild(Names::settingsList));
    loopItem = lumin::ui::UiListViewItem::CastFrom(root->findChild(Names::loopItem));
    loopToggle = lumin::ui::UiToggle::CastFrom(root->findChild(Names::loopToggle));
    resetItem = lumin::ui::UiListViewItem::CastFrom(root->findChild(Names::resetItem));
    resetButton = lumin::ui::UiButton::CastFrom(root->findChild(Names::resetButton));

  }

  VideoUIBase::~VideoUIBase() {
  }

  const PrefabDescriptor& VideoUIBase::getPrefabDescriptor() const {
    return classPrefabDescriptor_;
  }

  const PrefabBase::NodeReferences& VideoUIBase::getNodeReferences() const {
    return classNodeReferences_;
  }

  lumin::ui::UiPanel* VideoUIBase::getCursorVisiblePanel() {
    return cursorVisiblePanel;
  }

  lumin::ui::UiLinearLayout* VideoUIBase::getTopLayout() {
    return topLayout;
  }

  lumin::ui::UiText* VideoUIBase::getTitle() {
    return title;
  }

  lumin::ui::UiRectLayout* VideoUIBase::getVideoUI() {
    return videoUI;
  }

  lumin::TransformNode* VideoUIBase::getVideoPlaceholderRoot() {
    return videoPlaceholderRoot;
  }

  lumin::ui::UiImage* VideoUIBase::getVideoPlaceholder() {
    return videoPlaceholder;
  }

  lumin::ui::UiButton* VideoUIBase::getPlayButton() {
    return playButton;
  }

  lumin::ui::UiLinearLayout* VideoUIBase::getFullMenu() {
    return fullMenu;
  }

  lumin::ui::UiSlider* VideoUIBase::getVideoSlider() {
    return videoSlider;
  }

  lumin::ui::UiGridLayout* VideoUIBase::getFullToolbar() {
    return fullToolbar;
  }

  lumin::ui::UiLinearLayout* VideoUIBase::getVideoToolbar() {
    return videoToolbar;
  }

  lumin::ui::UiRectLayout* VideoUIBase::getPlayerButton() {
    return playerButton;
  }

  lumin::ui::UiButton* VideoUIBase::getPauseButton() {
    return pauseButton;
  }

  lumin::ui::UiButton* VideoUIBase::getMiniPlayButton() {
    return miniPlayButton;
  }

  lumin::ui::UiButton* VideoUIBase::getReplayButton() {
    return replayButton;
  }

  lumin::ui::UiButton* VideoUIBase::getVolumeButton() {
    return volumeButton;
  }

  lumin::ui::UiButton* VideoUIBase::getMuteButton() {
    return muteButton;
  }

  lumin::ui::UiSlider* VideoUIBase::getVolumeSlider() {
    return volumeSlider;
  }

  lumin::ui::UiText* VideoUIBase::getVideoTime() {
    return videoTime;
  }

  lumin::ui::UiButton* VideoUIBase::getVideoMenuIcon() {
    return videoMenuIcon;
  }

  lumin::ui::UiText* VideoUIBase::getErrorMsg() {
    return errorMsg;
  }

  lumin::ui::UiListView* VideoUIBase::getSettingsList() {
    return settingsList;
  }

  lumin::ui::UiListViewItem* VideoUIBase::getLoopItem() {
    return loopItem;
  }

  lumin::ui::UiToggle* VideoUIBase::getLoopToggle() {
    return loopToggle;
  }

  lumin::ui::UiListViewItem* VideoUIBase::getResetItem() {
    return resetItem;
  }

  lumin::ui::UiButton* VideoUIBase::getResetButton() {
    return resetButton;
  }

}
