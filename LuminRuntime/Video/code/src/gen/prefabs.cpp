// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --
//
// THE CONTENTS OF THIS FILE IS GENERATED BY CODE AND
// ANY MODIFICATIONS WILL BE OVERWRITTEN
//
// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --

// %BANNER_BEGIN%
// ---------------------------------------------------------------------
// %COPYRIGHT_BEGIN%
//
// Copyright (c) 2018 Magic Leap, Inc. All Rights Reserved.
// Use of this file is governed by the Creator Agreement, located
// here: https://id.magicleap.com/creator-terms
//
// %COPYRIGHT_END%
// ---------------------------------------------------------------------
// %BANNER_END%

// %SRC_VERSION%: 2

#include <prefabs.h>
#include <PrefabManager.h>
#include <VideoUI.h>

namespace prefabs {

  const PrefabBase::NodeReferences VideoUIBase::classNodeReferences_ = {
    "cursorVisiblePanel",
    "topLayout",
    "title",
    "videoUI",
    "videoPlaceholderRoot",
    "videoPlaceholder",
    "playButton",
    "fullMenu",
    "videoSlider",
    "fullToolbar",
    "videoToolbar",
    "playerButton",
    "pauseButton",
    "miniPlayButton",
    "replayButton",
    "volumeButton",
    "muteButton",
    "volumeSlider",
    "videoTime",
    "videoMenuIcon",
    "errorMsg",
    "settingsList",
    "loopItem",
    "loopToggle",
    "resetItem",
    "resetButton"
  };

  const std::string& VideoUIBase::Names::cursorVisiblePanel = VideoUIBase::classNodeReferences_[0];
  const std::string& VideoUIBase::Names::topLayout = VideoUIBase::classNodeReferences_[1];
  const std::string& VideoUIBase::Names::title = VideoUIBase::classNodeReferences_[2];
  const std::string& VideoUIBase::Names::videoUI = VideoUIBase::classNodeReferences_[3];
  const std::string& VideoUIBase::Names::videoPlaceholderRoot = VideoUIBase::classNodeReferences_[4];
  const std::string& VideoUIBase::Names::videoPlaceholder = VideoUIBase::classNodeReferences_[5];
  const std::string& VideoUIBase::Names::playButton = VideoUIBase::classNodeReferences_[6];
  const std::string& VideoUIBase::Names::fullMenu = VideoUIBase::classNodeReferences_[7];
  const std::string& VideoUIBase::Names::videoSlider = VideoUIBase::classNodeReferences_[8];
  const std::string& VideoUIBase::Names::fullToolbar = VideoUIBase::classNodeReferences_[9];
  const std::string& VideoUIBase::Names::videoToolbar = VideoUIBase::classNodeReferences_[10];
  const std::string& VideoUIBase::Names::playerButton = VideoUIBase::classNodeReferences_[11];
  const std::string& VideoUIBase::Names::pauseButton = VideoUIBase::classNodeReferences_[12];
  const std::string& VideoUIBase::Names::miniPlayButton = VideoUIBase::classNodeReferences_[13];
  const std::string& VideoUIBase::Names::replayButton = VideoUIBase::classNodeReferences_[14];
  const std::string& VideoUIBase::Names::volumeButton = VideoUIBase::classNodeReferences_[15];
  const std::string& VideoUIBase::Names::muteButton = VideoUIBase::classNodeReferences_[16];
  const std::string& VideoUIBase::Names::volumeSlider = VideoUIBase::classNodeReferences_[17];
  const std::string& VideoUIBase::Names::videoTime = VideoUIBase::classNodeReferences_[18];
  const std::string& VideoUIBase::Names::videoMenuIcon = VideoUIBase::classNodeReferences_[19];
  const std::string& VideoUIBase::Names::errorMsg = VideoUIBase::classNodeReferences_[20];
  const std::string& VideoUIBase::Names::settingsList = VideoUIBase::classNodeReferences_[21];
  const std::string& VideoUIBase::Names::loopItem = VideoUIBase::classNodeReferences_[22];
  const std::string& VideoUIBase::Names::loopToggle = VideoUIBase::classNodeReferences_[23];
  const std::string& VideoUIBase::Names::resetItem = VideoUIBase::classNodeReferences_[24];
  const std::string& VideoUIBase::Names::resetButton = VideoUIBase::classNodeReferences_[25];

  const PrefabDescriptor VideoUIBase::classPrefabDescriptor_(
    0,
    "VideoUI",
    "root",
    "/assets/scenes/VideoUI.scene.xml",
    "/assets/scenes/VideoUI.scene.res.xml");

  const PrefabDescriptorMap prefabDescriptorMap = {
    { VideoUI::getClassPrefabDescriptor().getName(), VideoUI::getClassPrefabDescriptor() }
  };

  struct VerifyNumberOfPrefabs {
    VerifyNumberOfPrefabs() { assert(prefabDescriptorMap.size() == numberOfPrefabs); }
  };

  VerifyNumberOfPrefabs verifyNumberOfPrefabs;
}

const ExtendedPrefabManager::CreatePrefab ExtendedPrefabManager::createPrefab[prefabs::numberOfPrefabs] = {
  ::prefabs::VideoUI::createPrefab
};
